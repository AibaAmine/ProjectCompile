State 71 conflicts: 1 shift/reduce


Grammar

    0 $accept: programme $end

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions ENDPG PVG

    2 declarations: declaration
    3             | declarations declaration

    4 declaration: LET var_list DP type PVG
    5            | LET var_list DP CO type PVG INTEGER CF PVG
    6            | DEFINE CONST IDF DP type EGAL value PVG

    7 var_list: IDF
    8         | var_list COMMA IDF

    9 type: INT
   10     | FLOAT

   11 value: INTEGER
   12      | FLOATING
   13      | STRING

   14 instructions: instruction
   15             | instructions instruction

   16 instruction: affectation
   17            | condition
   18            | boucle
   19            | lecture
   20            | ecriture

   21 affectation: IDF AFF expression PVG
   22            | IDF CO expression CF AFF expression PVG

   23 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions AF
   24          | IF PO conditions PF THEN AO instructions AF

   25 boucle: DO AO instructions AF WHILE PO conditions PF PVG
   26       | FOR IDF FROM expression TO expression STEP expression AO instructions AF

   27 lecture: INPUT PO IDF PF PVG

   28 ecriture: OUTPUT PO STRING COMMA IDF PF PVG
   29         | OUTPUT PO STRING PF PVG

   30 conditions: expression
   31           | conditions OR conditions
   32           | conditions AND conditions
   33           | PO conditions PF
   34           | expression EGAL expression
   35           | expression INF expression
   36           | expression SUP expression
   37           | expression SUPEG expression
   38           | expression INFEG expression
   39           | expression EGALITE expression
   40           | expression DIFFERENT expression
   41           | NOT conditions

   42 expression: value
   43           | IDF
   44           | expression PLUS expression
   45           | expression MINUS expression
   46           | expression MULT expression
   47           | PO expression PF
   48           | expression DIV expression
   49           | IDF CO expression CF


Terminals, with rules where they appear

$end (0) 0
error (256)
MAINPRGM (258) 1
VAR (259) 1
BEGINPG (260) 1
ENDPG (261) 1
LET (262) 4 5
DEFINE (263) 6
CONST (264) 6
INT (265) 9
FLOAT (266) 10
IF (267) 23 24
THEN (268) 23 24
ELSE (269) 23
DO (270) 25
WHILE (271) 25
FOR (272) 26
FROM (273) 26
TO (274) 26
STEP (275) 26
INPUT (276) 27
OUTPUT (277) 28 29
PLUS (278) 44
MINUS (279) 45
MULT (280) 46
DIV (281) 48
AFF (282) 21 22
EGAL (283) 6 34
INF (284) 35
SUP (285) 36
SUPEG (286) 37
INFEG (287) 38
EGALITE (288) 39
DIFFERENT (289) 40
AND (290) 32
OR (291) 31
NOT (292) 41
PVG (293) 1 4 5 6 21 22 25 27 28 29
DP (294) 4 5 6
COMMA (295) 8 28
PO (296) 23 24 25 27 28 29 33 47
PF (297) 23 24 25 27 28 29 33 47
AO (298) 23 24 25 26
AF (299) 23 24 25 26
CO (300) 5 22 49
CF (301) 5 22 49
INTEGER (302) 5 11
FLOATING (303) 12
STRING (304) 13 28 29
IDF (305) 1 6 7 8 21 22 26 27 28 43 49


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
programme (52)
    on left: 1, on right: 0
declarations (53)
    on left: 2 3, on right: 1 3
declaration (54)
    on left: 4 5 6, on right: 2 3
var_list (55)
    on left: 7 8, on right: 4 5 8
type (56)
    on left: 9 10, on right: 4 5 6
value (57)
    on left: 11 12 13, on right: 6 42
instructions (58)
    on left: 14 15, on right: 1 15 23 24 25 26
instruction (59)
    on left: 16 17 18 19 20, on right: 14 15
affectation (60)
    on left: 21 22, on right: 16
condition (61)
    on left: 23 24, on right: 17
boucle (62)
    on left: 25 26, on right: 18
lecture (63)
    on left: 27, on right: 19
ecriture (64)
    on left: 28 29, on right: 20
conditions (65)
    on left: 30 31 32 33 34 35 36 37 38 39 40 41, on right: 23 24 25
    31 32 33 41
expression (66)
    on left: 42 43 44 45 46 47 48 49, on right: 21 22 26 30 34 35 36
    37 38 39 40 44 45 46 47 48 49


state 0

    0 $accept: . programme $end

    MAINPRGM  shift, and go to state 1

    programme  go to state 2


state 1

    1 programme: MAINPRGM . IDF PVG VAR declarations BEGINPG instructions ENDPG PVG

    IDF  shift, and go to state 3


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 4


state 3

    1 programme: MAINPRGM IDF . PVG VAR declarations BEGINPG instructions ENDPG PVG

    PVG  shift, and go to state 5


state 4

    0 $accept: programme $end .

    $default  accept


state 5

    1 programme: MAINPRGM IDF PVG . VAR declarations BEGINPG instructions ENDPG PVG

    VAR  shift, and go to state 6


state 6

    1 programme: MAINPRGM IDF PVG VAR . declarations BEGINPG instructions ENDPG PVG

    LET     shift, and go to state 7
    DEFINE  shift, and go to state 8

    declarations  go to state 9
    declaration   go to state 10


state 7

    4 declaration: LET . var_list DP type PVG
    5            | LET . var_list DP CO type PVG INTEGER CF PVG

    IDF  shift, and go to state 11

    var_list  go to state 12


state 8

    6 declaration: DEFINE . CONST IDF DP type EGAL value PVG

    CONST  shift, and go to state 13


state 9

    1 programme: MAINPRGM IDF PVG VAR declarations . BEGINPG instructions ENDPG PVG
    3 declarations: declarations . declaration

    BEGINPG  shift, and go to state 14
    LET      shift, and go to state 7
    DEFINE   shift, and go to state 8

    declaration  go to state 15


state 10

    2 declarations: declaration .

    $default  reduce using rule 2 (declarations)


state 11

    7 var_list: IDF .

    $default  reduce using rule 7 (var_list)


state 12

    4 declaration: LET var_list . DP type PVG
    5            | LET var_list . DP CO type PVG INTEGER CF PVG
    8 var_list: var_list . COMMA IDF

    DP     shift, and go to state 16
    COMMA  shift, and go to state 17


state 13

    6 declaration: DEFINE CONST . IDF DP type EGAL value PVG

    IDF  shift, and go to state 18


state 14

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG . instructions ENDPG PVG

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 25
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 15

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


state 16

    4 declaration: LET var_list DP . type PVG
    5            | LET var_list DP . CO type PVG INTEGER CF PVG

    INT    shift, and go to state 32
    FLOAT  shift, and go to state 33
    CO     shift, and go to state 34

    type  go to state 35


state 17

    8 var_list: var_list COMMA . IDF

    IDF  shift, and go to state 36


state 18

    6 declaration: DEFINE CONST IDF . DP type EGAL value PVG

    DP  shift, and go to state 37


state 19

   23 condition: IF . PO conditions PF THEN AO instructions AF ELSE AO instructions AF
   24          | IF . PO conditions PF THEN AO instructions AF

    PO  shift, and go to state 38


state 20

   25 boucle: DO . AO instructions AF WHILE PO conditions PF PVG

    AO  shift, and go to state 39


state 21

   26 boucle: FOR . IDF FROM expression TO expression STEP expression AO instructions AF

    IDF  shift, and go to state 40


state 22

   27 lecture: INPUT . PO IDF PF PVG

    PO  shift, and go to state 41


state 23

   28 ecriture: OUTPUT . PO STRING COMMA IDF PF PVG
   29         | OUTPUT . PO STRING PF PVG

    PO  shift, and go to state 42


state 24

   21 affectation: IDF . AFF expression PVG
   22            | IDF . CO expression CF AFF expression PVG

    AFF  shift, and go to state 43
    CO   shift, and go to state 44


state 25

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions . ENDPG PVG
   15 instructions: instructions . instruction

    ENDPG   shift, and go to state 45
    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 26

   14 instructions: instruction .

    $default  reduce using rule 14 (instructions)


state 27

   16 instruction: affectation .

    $default  reduce using rule 16 (instruction)


state 28

   17 instruction: condition .

    $default  reduce using rule 17 (instruction)


state 29

   18 instruction: boucle .

    $default  reduce using rule 18 (instruction)


state 30

   19 instruction: lecture .

    $default  reduce using rule 19 (instruction)


state 31

   20 instruction: ecriture .

    $default  reduce using rule 20 (instruction)


state 32

    9 type: INT .

    $default  reduce using rule 9 (type)


state 33

   10 type: FLOAT .

    $default  reduce using rule 10 (type)


state 34

    5 declaration: LET var_list DP CO . type PVG INTEGER CF PVG

    INT    shift, and go to state 32
    FLOAT  shift, and go to state 33

    type  go to state 47


state 35

    4 declaration: LET var_list DP type . PVG

    PVG  shift, and go to state 48


state 36

    8 var_list: var_list COMMA IDF .

    $default  reduce using rule 8 (var_list)


state 37

    6 declaration: DEFINE CONST IDF DP . type EGAL value PVG

    INT    shift, and go to state 32
    FLOAT  shift, and go to state 33

    type  go to state 49


state 38

   23 condition: IF PO . conditions PF THEN AO instructions AF ELSE AO instructions AF
   24          | IF PO . conditions PF THEN AO instructions AF

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    conditions  go to state 57
    expression  go to state 58


state 39

   25 boucle: DO AO . instructions AF WHILE PO conditions PF PVG

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 59
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 40

   26 boucle: FOR IDF . FROM expression TO expression STEP expression AO instructions AF

    FROM  shift, and go to state 60


state 41

   27 lecture: INPUT PO . IDF PF PVG

    IDF  shift, and go to state 61


state 42

   28 ecriture: OUTPUT PO . STRING COMMA IDF PF PVG
   29         | OUTPUT PO . STRING PF PVG

    STRING  shift, and go to state 62


state 43

   21 affectation: IDF AFF . expression PVG

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 64


state 44

   22 affectation: IDF CO . expression CF AFF expression PVG

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 65


state 45

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions ENDPG . PVG

    PVG  shift, and go to state 66


state 46

   15 instructions: instructions instruction .

    $default  reduce using rule 15 (instructions)


state 47

    5 declaration: LET var_list DP CO type . PVG INTEGER CF PVG

    PVG  shift, and go to state 67


state 48

    4 declaration: LET var_list DP type PVG .

    $default  reduce using rule 4 (declaration)


state 49

    6 declaration: DEFINE CONST IDF DP type . EGAL value PVG

    EGAL  shift, and go to state 68


state 50

   41 conditions: NOT . conditions

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    conditions  go to state 69
    expression  go to state 58


state 51

   33 conditions: PO . conditions PF
   47 expression: PO . expression PF

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    conditions  go to state 70
    expression  go to state 71


state 52

   11 value: INTEGER .

    $default  reduce using rule 11 (value)


state 53

   12 value: FLOATING .

    $default  reduce using rule 12 (value)


state 54

   13 value: STRING .

    $default  reduce using rule 13 (value)


state 55

   43 expression: IDF .
   49           | IDF . CO expression CF

    CO  shift, and go to state 72

    $default  reduce using rule 43 (expression)


state 56

   42 expression: value .

    $default  reduce using rule 42 (expression)


state 57

   23 condition: IF PO conditions . PF THEN AO instructions AF ELSE AO instructions AF
   24          | IF PO conditions . PF THEN AO instructions AF
   31 conditions: conditions . OR conditions
   32           | conditions . AND conditions

    AND  shift, and go to state 73
    OR   shift, and go to state 74
    PF   shift, and go to state 75


state 58

   30 conditions: expression .
   34           | expression . EGAL expression
   35           | expression . INF expression
   36           | expression . SUP expression
   37           | expression . SUPEG expression
   38           | expression . INFEG expression
   39           | expression . EGALITE expression
   40           | expression . DIFFERENT expression
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS       shift, and go to state 76
    MINUS      shift, and go to state 77
    MULT       shift, and go to state 78
    DIV        shift, and go to state 79
    EGAL       shift, and go to state 80
    INF        shift, and go to state 81
    SUP        shift, and go to state 82
    SUPEG      shift, and go to state 83
    INFEG      shift, and go to state 84
    EGALITE    shift, and go to state 85
    DIFFERENT  shift, and go to state 86

    $default  reduce using rule 30 (conditions)


state 59

   15 instructions: instructions . instruction
   25 boucle: DO AO instructions . AF WHILE PO conditions PF PVG

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 87
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 60

   26 boucle: FOR IDF FROM . expression TO expression STEP expression AO instructions AF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 88


state 61

   27 lecture: INPUT PO IDF . PF PVG

    PF  shift, and go to state 89


state 62

   28 ecriture: OUTPUT PO STRING . COMMA IDF PF PVG
   29         | OUTPUT PO STRING . PF PVG

    COMMA  shift, and go to state 90
    PF     shift, and go to state 91


state 63

   47 expression: PO . expression PF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 92


state 64

   21 affectation: IDF AFF expression . PVG
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79
    PVG    shift, and go to state 93


state 65

   22 affectation: IDF CO expression . CF AFF expression PVG
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79
    CF     shift, and go to state 94


state 66

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions ENDPG PVG .

    $default  reduce using rule 1 (programme)


state 67

    5 declaration: LET var_list DP CO type PVG . INTEGER CF PVG

    INTEGER  shift, and go to state 95


state 68

    6 declaration: DEFINE CONST IDF DP type EGAL . value PVG

    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54

    value  go to state 96


state 69

   31 conditions: conditions . OR conditions
   32           | conditions . AND conditions
   41           | NOT conditions .

    $default  reduce using rule 41 (conditions)


state 70

   31 conditions: conditions . OR conditions
   32           | conditions . AND conditions
   33           | PO conditions . PF

    AND  shift, and go to state 73
    OR   shift, and go to state 74
    PF   shift, and go to state 97


state 71

   30 conditions: expression .
   34           | expression . EGAL expression
   35           | expression . INF expression
   36           | expression . SUP expression
   37           | expression . SUPEG expression
   38           | expression . INFEG expression
   39           | expression . EGALITE expression
   40           | expression . DIFFERENT expression
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   47           | PO expression . PF
   48           | expression . DIV expression

    PLUS       shift, and go to state 76
    MINUS      shift, and go to state 77
    MULT       shift, and go to state 78
    DIV        shift, and go to state 79
    EGAL       shift, and go to state 80
    INF        shift, and go to state 81
    SUP        shift, and go to state 82
    SUPEG      shift, and go to state 83
    INFEG      shift, and go to state 84
    EGALITE    shift, and go to state 85
    DIFFERENT  shift, and go to state 86
    PF         shift, and go to state 98

    PF        [reduce using rule 30 (conditions)]
    $default  reduce using rule 30 (conditions)


state 72

   49 expression: IDF CO . expression CF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 99


state 73

   32 conditions: conditions AND . conditions

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    conditions  go to state 100
    expression  go to state 58


state 74

   31 conditions: conditions OR . conditions

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    conditions  go to state 101
    expression  go to state 58


state 75

   23 condition: IF PO conditions PF . THEN AO instructions AF ELSE AO instructions AF
   24          | IF PO conditions PF . THEN AO instructions AF

    THEN  shift, and go to state 102


state 76

   44 expression: expression PLUS . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 103


state 77

   45 expression: expression MINUS . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 104


state 78

   46 expression: expression MULT . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 105


state 79

   48 expression: expression DIV . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 106


state 80

   34 conditions: expression EGAL . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 107


state 81

   35 conditions: expression INF . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 108


state 82

   36 conditions: expression SUP . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 109


state 83

   37 conditions: expression SUPEG . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 110


state 84

   38 conditions: expression INFEG . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 111


state 85

   39 conditions: expression EGALITE . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 112


state 86

   40 conditions: expression DIFFERENT . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 113


state 87

   25 boucle: DO AO instructions AF . WHILE PO conditions PF PVG

    WHILE  shift, and go to state 114


state 88

   26 boucle: FOR IDF FROM expression . TO expression STEP expression AO instructions AF
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    TO     shift, and go to state 115
    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79


state 89

   27 lecture: INPUT PO IDF PF . PVG

    PVG  shift, and go to state 116


state 90

   28 ecriture: OUTPUT PO STRING COMMA . IDF PF PVG

    IDF  shift, and go to state 117


state 91

   29 ecriture: OUTPUT PO STRING PF . PVG

    PVG  shift, and go to state 118


state 92

   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   47           | PO expression . PF
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79
    PF     shift, and go to state 98


state 93

   21 affectation: IDF AFF expression PVG .

    $default  reduce using rule 21 (affectation)


state 94

   22 affectation: IDF CO expression CF . AFF expression PVG

    AFF  shift, and go to state 119


state 95

    5 declaration: LET var_list DP CO type PVG INTEGER . CF PVG

    CF  shift, and go to state 120


state 96

    6 declaration: DEFINE CONST IDF DP type EGAL value . PVG

    PVG  shift, and go to state 121


state 97

   33 conditions: PO conditions PF .

    $default  reduce using rule 33 (conditions)


state 98

   47 expression: PO expression PF .

    $default  reduce using rule 47 (expression)


state 99

   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression
   49           | IDF CO expression . CF

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79
    CF     shift, and go to state 122


state 100

   31 conditions: conditions . OR conditions
   32           | conditions . AND conditions
   32           | conditions AND conditions .

    $default  reduce using rule 32 (conditions)


state 101

   31 conditions: conditions . OR conditions
   31           | conditions OR conditions .
   32           | conditions . AND conditions

    AND  shift, and go to state 73

    $default  reduce using rule 31 (conditions)


state 102

   23 condition: IF PO conditions PF THEN . AO instructions AF ELSE AO instructions AF
   24          | IF PO conditions PF THEN . AO instructions AF

    AO  shift, and go to state 123


state 103

   44 expression: expression . PLUS expression
   44           | expression PLUS expression .
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    MULT  shift, and go to state 78
    DIV   shift, and go to state 79

    $default  reduce using rule 44 (expression)


state 104

   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   45           | expression MINUS expression .
   46           | expression . MULT expression
   48           | expression . DIV expression

    MULT  shift, and go to state 78
    DIV   shift, and go to state 79

    $default  reduce using rule 45 (expression)


state 105

   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   46           | expression MULT expression .
   48           | expression . DIV expression

    $default  reduce using rule 46 (expression)


state 106

   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression
   48           | expression DIV expression .

    $default  reduce using rule 48 (expression)


state 107

   34 conditions: expression EGAL expression .
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79

    $default  reduce using rule 34 (conditions)


state 108

   35 conditions: expression INF expression .
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79

    $default  reduce using rule 35 (conditions)


state 109

   36 conditions: expression SUP expression .
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79

    $default  reduce using rule 36 (conditions)


state 110

   37 conditions: expression SUPEG expression .
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79

    $default  reduce using rule 37 (conditions)


state 111

   38 conditions: expression INFEG expression .
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79

    $default  reduce using rule 38 (conditions)


state 112

   39 conditions: expression EGALITE expression .
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79

    $default  reduce using rule 39 (conditions)


state 113

   40 conditions: expression DIFFERENT expression .
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79

    $default  reduce using rule 40 (conditions)


state 114

   25 boucle: DO AO instructions AF WHILE . PO conditions PF PVG

    PO  shift, and go to state 124


state 115

   26 boucle: FOR IDF FROM expression TO . expression STEP expression AO instructions AF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 125


state 116

   27 lecture: INPUT PO IDF PF PVG .

    $default  reduce using rule 27 (lecture)


state 117

   28 ecriture: OUTPUT PO STRING COMMA IDF . PF PVG

    PF  shift, and go to state 126


state 118

   29 ecriture: OUTPUT PO STRING PF PVG .

    $default  reduce using rule 29 (ecriture)


state 119

   22 affectation: IDF CO expression CF AFF . expression PVG

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 127


state 120

    5 declaration: LET var_list DP CO type PVG INTEGER CF . PVG

    PVG  shift, and go to state 128


state 121

    6 declaration: DEFINE CONST IDF DP type EGAL value PVG .

    $default  reduce using rule 6 (declaration)


state 122

   49 expression: IDF CO expression CF .

    $default  reduce using rule 49 (expression)


state 123

   23 condition: IF PO conditions PF THEN AO . instructions AF ELSE AO instructions AF
   24          | IF PO conditions PF THEN AO . instructions AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 129
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 124

   25 boucle: DO AO instructions AF WHILE PO . conditions PF PVG

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    conditions  go to state 130
    expression  go to state 58


state 125

   26 boucle: FOR IDF FROM expression TO expression . STEP expression AO instructions AF
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    STEP   shift, and go to state 131
    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79


state 126

   28 ecriture: OUTPUT PO STRING COMMA IDF PF . PVG

    PVG  shift, and go to state 132


state 127

   22 affectation: IDF CO expression CF AFF expression . PVG
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79
    PVG    shift, and go to state 133


state 128

    5 declaration: LET var_list DP CO type PVG INTEGER CF PVG .

    $default  reduce using rule 5 (declaration)


state 129

   15 instructions: instructions . instruction
   23 condition: IF PO conditions PF THEN AO instructions . AF ELSE AO instructions AF
   24          | IF PO conditions PF THEN AO instructions . AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 134
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 130

   25 boucle: DO AO instructions AF WHILE PO conditions . PF PVG
   31 conditions: conditions . OR conditions
   32           | conditions . AND conditions

    AND  shift, and go to state 73
    OR   shift, and go to state 74
    PF   shift, and go to state 135


state 131

   26 boucle: FOR IDF FROM expression TO expression STEP . expression AO instructions AF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 136


state 132

   28 ecriture: OUTPUT PO STRING COMMA IDF PF PVG .

    $default  reduce using rule 28 (ecriture)


state 133

   22 affectation: IDF CO expression CF AFF expression PVG .

    $default  reduce using rule 22 (affectation)


state 134

   23 condition: IF PO conditions PF THEN AO instructions AF . ELSE AO instructions AF
   24          | IF PO conditions PF THEN AO instructions AF .

    ELSE  shift, and go to state 137

    $default  reduce using rule 24 (condition)


state 135

   25 boucle: DO AO instructions AF WHILE PO conditions PF . PVG

    PVG  shift, and go to state 138


state 136

   26 boucle: FOR IDF FROM expression TO expression STEP expression . AO instructions AF
   44 expression: expression . PLUS expression
   45           | expression . MINUS expression
   46           | expression . MULT expression
   48           | expression . DIV expression

    PLUS   shift, and go to state 76
    MINUS  shift, and go to state 77
    MULT   shift, and go to state 78
    DIV    shift, and go to state 79
    AO     shift, and go to state 139


state 137

   23 condition: IF PO conditions PF THEN AO instructions AF ELSE . AO instructions AF

    AO  shift, and go to state 140


state 138

   25 boucle: DO AO instructions AF WHILE PO conditions PF PVG .

    $default  reduce using rule 25 (boucle)


state 139

   26 boucle: FOR IDF FROM expression TO expression STEP expression AO . instructions AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 141
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 140

   23 condition: IF PO conditions PF THEN AO instructions AF ELSE AO . instructions AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 142
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 141

   15 instructions: instructions . instruction
   26 boucle: FOR IDF FROM expression TO expression STEP expression AO instructions . AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 143
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 142

   15 instructions: instructions . instruction
   23 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions . AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 144
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 143

   26 boucle: FOR IDF FROM expression TO expression STEP expression AO instructions AF .

    $default  reduce using rule 26 (boucle)


state 144

   23 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions AF .

    $default  reduce using rule 23 (condition)
