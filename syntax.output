Grammar

    0 $accept: programme $end

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions ENDPG PVG

    2 declarations: declaration
    3             | declarations declaration

    4 declaration: LET var_list DP type PVG
    5            | LET var_list DP CO type PVG INTEGER CF PVG
    6            | DEFINE CONST IDF DP type EGAL value PVG

    7 var_list: IDF
    8         | var_list COMMA IDF

    9 type: INT
   10     | FLOAT

   11 value: INTEGER
   12      | FLOATING
   13      | STRING

   14 instructions: instruction
   15             | instructions instruction

   16 instruction: affectation
   17            | condition
   18            | boucle
   19            | lecture
   20            | ecriture

   21 affectation: IDF AFF expression PVG
   22            | IDF CO expression CF AFF expression PVG

   23 expression: value
   24           | IDF
   25           | expression PLUS expression
   26           | expression MINUS expression
   27           | expression MULT expression
   28           | expression DIV expression
   29           | PO expression PF
   30           | IDF CO expression CF

   31 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions AF
   32          | IF PO conditions PF THEN AO instructions AF

   33 boucle: DO AO instructions AF WHILE PO conditions PF PVG
   34       | FOR IDF FROM expression TO expression STEP expression AO instructions AF

   35 lecture: INPUT PO IDF PF PVG

   36 ecriture: OUTPUT PO STRING COMMA IDF PF PVG
   37         | OUTPUT PO STRING PF PVG

   38 conditions: expression comparison expression
   39           | conditions OR conditions
   40           | conditions AND conditions
   41           | PO conditions PF
   42           | NOT conditions

   43 comparison: SUP
   44           | INF
   45           | EGAL
   46           | SUPEG
   47           | INFEG
   48           | EGALITE
   49           | DIFFERENT


Terminals, with rules where they appear

$end (0) 0
error (256)
MAINPRGM (258) 1
VAR (259) 1
BEGINPG (260) 1
ENDPG (261) 1
LET (262) 4 5
DEFINE (263) 6
CONST (264) 6
INT (265) 9
FLOAT (266) 10
IF (267) 31 32
THEN (268) 31 32
ELSE (269) 31
DO (270) 33
WHILE (271) 33
FOR (272) 34
FROM (273) 34
TO (274) 34
STEP (275) 34
INPUT (276) 35
OUTPUT (277) 36 37
PLUS (278) 25
MINUS (279) 26
MULT (280) 27
DIV (281) 28
AFF (282) 21 22
EGAL (283) 6 45
INF (284) 44
SUP (285) 43
SUPEG (286) 46
INFEG (287) 47
EGALITE (288) 48
DIFFERENT (289) 49
AND (290) 40
OR (291) 39
NOT (292) 42
PVG (293) 1 4 5 6 21 22 33 35 36 37
DP (294) 4 5 6
COMMA (295) 8 36
PO (296) 29 31 32 33 35 36 37 41
PF (297) 29 31 32 33 35 36 37 41
AO (298) 31 32 33 34
AF (299) 31 32 33 34
CO (300) 5 22 30
CF (301) 5 22 30
INTEGER (302) 5 11
FLOATING (303) 12
STRING (304) 13 36 37
IDF (305) 1 6 7 8 21 22 24 30 34 35 36


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
programme (52)
    on left: 1, on right: 0
declarations (53)
    on left: 2 3, on right: 1 3
declaration (54)
    on left: 4 5 6, on right: 2 3
var_list (55)
    on left: 7 8, on right: 4 5 8
type (56)
    on left: 9 10, on right: 4 5 6
value (57)
    on left: 11 12 13, on right: 6 23
instructions (58)
    on left: 14 15, on right: 1 15 31 32 33 34
instruction (59)
    on left: 16 17 18 19 20, on right: 14 15
affectation (60)
    on left: 21 22, on right: 16
expression (61)
    on left: 23 24 25 26 27 28 29 30, on right: 21 22 25 26 27 28 29
    30 34 38
condition (62)
    on left: 31 32, on right: 17
boucle (63)
    on left: 33 34, on right: 18
lecture (64)
    on left: 35, on right: 19
ecriture (65)
    on left: 36 37, on right: 20
conditions (66)
    on left: 38 39 40 41 42, on right: 31 32 33 39 40 41 42
comparison (67)
    on left: 43 44 45 46 47 48 49, on right: 38


state 0

    0 $accept: . programme $end

    MAINPRGM  shift, and go to state 1

    programme  go to state 2


state 1

    1 programme: MAINPRGM . IDF PVG VAR declarations BEGINPG instructions ENDPG PVG

    IDF  shift, and go to state 3


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 4


state 3

    1 programme: MAINPRGM IDF . PVG VAR declarations BEGINPG instructions ENDPG PVG

    PVG  shift, and go to state 5


state 4

    0 $accept: programme $end .

    $default  accept


state 5

    1 programme: MAINPRGM IDF PVG . VAR declarations BEGINPG instructions ENDPG PVG

    VAR  shift, and go to state 6


state 6

    1 programme: MAINPRGM IDF PVG VAR . declarations BEGINPG instructions ENDPG PVG

    LET     shift, and go to state 7
    DEFINE  shift, and go to state 8

    declarations  go to state 9
    declaration   go to state 10


state 7

    4 declaration: LET . var_list DP type PVG
    5            | LET . var_list DP CO type PVG INTEGER CF PVG

    IDF  shift, and go to state 11

    var_list  go to state 12


state 8

    6 declaration: DEFINE . CONST IDF DP type EGAL value PVG

    CONST  shift, and go to state 13


state 9

    1 programme: MAINPRGM IDF PVG VAR declarations . BEGINPG instructions ENDPG PVG
    3 declarations: declarations . declaration

    BEGINPG  shift, and go to state 14
    LET      shift, and go to state 7
    DEFINE   shift, and go to state 8

    declaration  go to state 15


state 10

    2 declarations: declaration .

    $default  reduce using rule 2 (declarations)


state 11

    7 var_list: IDF .

    $default  reduce using rule 7 (var_list)


state 12

    4 declaration: LET var_list . DP type PVG
    5            | LET var_list . DP CO type PVG INTEGER CF PVG
    8 var_list: var_list . COMMA IDF

    DP     shift, and go to state 16
    COMMA  shift, and go to state 17


state 13

    6 declaration: DEFINE CONST . IDF DP type EGAL value PVG

    IDF  shift, and go to state 18


state 14

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG . instructions ENDPG PVG

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 25
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 15

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


state 16

    4 declaration: LET var_list DP . type PVG
    5            | LET var_list DP . CO type PVG INTEGER CF PVG

    INT    shift, and go to state 32
    FLOAT  shift, and go to state 33
    CO     shift, and go to state 34

    type  go to state 35


state 17

    8 var_list: var_list COMMA . IDF

    IDF  shift, and go to state 36


state 18

    6 declaration: DEFINE CONST IDF . DP type EGAL value PVG

    DP  shift, and go to state 37


state 19

   31 condition: IF . PO conditions PF THEN AO instructions AF ELSE AO instructions AF
   32          | IF . PO conditions PF THEN AO instructions AF

    PO  shift, and go to state 38


state 20

   33 boucle: DO . AO instructions AF WHILE PO conditions PF PVG

    AO  shift, and go to state 39


state 21

   34 boucle: FOR . IDF FROM expression TO expression STEP expression AO instructions AF

    IDF  shift, and go to state 40


state 22

   35 lecture: INPUT . PO IDF PF PVG

    PO  shift, and go to state 41


state 23

   36 ecriture: OUTPUT . PO STRING COMMA IDF PF PVG
   37         | OUTPUT . PO STRING PF PVG

    PO  shift, and go to state 42


state 24

   21 affectation: IDF . AFF expression PVG
   22            | IDF . CO expression CF AFF expression PVG

    AFF  shift, and go to state 43
    CO   shift, and go to state 44


state 25

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions . ENDPG PVG
   15 instructions: instructions . instruction

    ENDPG   shift, and go to state 45
    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 26

   14 instructions: instruction .

    $default  reduce using rule 14 (instructions)


state 27

   16 instruction: affectation .

    $default  reduce using rule 16 (instruction)


state 28

   17 instruction: condition .

    $default  reduce using rule 17 (instruction)


state 29

   18 instruction: boucle .

    $default  reduce using rule 18 (instruction)


state 30

   19 instruction: lecture .

    $default  reduce using rule 19 (instruction)


state 31

   20 instruction: ecriture .

    $default  reduce using rule 20 (instruction)


state 32

    9 type: INT .

    $default  reduce using rule 9 (type)


state 33

   10 type: FLOAT .

    $default  reduce using rule 10 (type)


state 34

    5 declaration: LET var_list DP CO . type PVG INTEGER CF PVG

    INT    shift, and go to state 32
    FLOAT  shift, and go to state 33

    type  go to state 47


state 35

    4 declaration: LET var_list DP type . PVG

    PVG  shift, and go to state 48


state 36

    8 var_list: var_list COMMA IDF .

    $default  reduce using rule 8 (var_list)


state 37

    6 declaration: DEFINE CONST IDF DP . type EGAL value PVG

    INT    shift, and go to state 32
    FLOAT  shift, and go to state 33

    type  go to state 49


state 38

   31 condition: IF PO . conditions PF THEN AO instructions AF ELSE AO instructions AF
   32          | IF PO . conditions PF THEN AO instructions AF

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 57
    conditions  go to state 58


state 39

   33 boucle: DO AO . instructions AF WHILE PO conditions PF PVG

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 59
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 40

   34 boucle: FOR IDF . FROM expression TO expression STEP expression AO instructions AF

    FROM  shift, and go to state 60


state 41

   35 lecture: INPUT PO . IDF PF PVG

    IDF  shift, and go to state 61


state 42

   36 ecriture: OUTPUT PO . STRING COMMA IDF PF PVG
   37         | OUTPUT PO . STRING PF PVG

    STRING  shift, and go to state 62


state 43

   21 affectation: IDF AFF . expression PVG

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 64


state 44

   22 affectation: IDF CO . expression CF AFF expression PVG

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 65


state 45

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions ENDPG . PVG

    PVG  shift, and go to state 66


state 46

   15 instructions: instructions instruction .

    $default  reduce using rule 15 (instructions)


state 47

    5 declaration: LET var_list DP CO type . PVG INTEGER CF PVG

    PVG  shift, and go to state 67


state 48

    4 declaration: LET var_list DP type PVG .

    $default  reduce using rule 4 (declaration)


state 49

    6 declaration: DEFINE CONST IDF DP type . EGAL value PVG

    EGAL  shift, and go to state 68


state 50

   42 conditions: NOT . conditions

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 57
    conditions  go to state 69


state 51

   29 expression: PO . expression PF
   41 conditions: PO . conditions PF

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 70
    conditions  go to state 71


state 52

   11 value: INTEGER .

    $default  reduce using rule 11 (value)


state 53

   12 value: FLOATING .

    $default  reduce using rule 12 (value)


state 54

   13 value: STRING .

    $default  reduce using rule 13 (value)


state 55

   24 expression: IDF .
   30           | IDF . CO expression CF

    CO  shift, and go to state 72

    $default  reduce using rule 24 (expression)


state 56

   23 expression: value .

    $default  reduce using rule 23 (expression)


state 57

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   38 conditions: expression . comparison expression

    PLUS       shift, and go to state 73
    MINUS      shift, and go to state 74
    MULT       shift, and go to state 75
    DIV        shift, and go to state 76
    EGAL       shift, and go to state 77
    INF        shift, and go to state 78
    SUP        shift, and go to state 79
    SUPEG      shift, and go to state 80
    INFEG      shift, and go to state 81
    EGALITE    shift, and go to state 82
    DIFFERENT  shift, and go to state 83

    comparison  go to state 84


state 58

   31 condition: IF PO conditions . PF THEN AO instructions AF ELSE AO instructions AF
   32          | IF PO conditions . PF THEN AO instructions AF
   39 conditions: conditions . OR conditions
   40           | conditions . AND conditions

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    PF   shift, and go to state 87


state 59

   15 instructions: instructions . instruction
   33 boucle: DO AO instructions . AF WHILE PO conditions PF PVG

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 88
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 60

   34 boucle: FOR IDF FROM . expression TO expression STEP expression AO instructions AF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 89


state 61

   35 lecture: INPUT PO IDF . PF PVG

    PF  shift, and go to state 90


state 62

   36 ecriture: OUTPUT PO STRING . COMMA IDF PF PVG
   37         | OUTPUT PO STRING . PF PVG

    COMMA  shift, and go to state 91
    PF     shift, and go to state 92


state 63

   29 expression: PO . expression PF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 93


state 64

   21 affectation: IDF AFF expression . PVG
   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76
    PVG    shift, and go to state 94


state 65

   22 affectation: IDF CO expression . CF AFF expression PVG
   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76
    CF     shift, and go to state 95


state 66

    1 programme: MAINPRGM IDF PVG VAR declarations BEGINPG instructions ENDPG PVG .

    $default  reduce using rule 1 (programme)


state 67

    5 declaration: LET var_list DP CO type PVG . INTEGER CF PVG

    INTEGER  shift, and go to state 96


state 68

    6 declaration: DEFINE CONST IDF DP type EGAL . value PVG

    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54

    value  go to state 97


state 69

   39 conditions: conditions . OR conditions
   40           | conditions . AND conditions
   42           | NOT conditions .

    $default  reduce using rule 42 (conditions)


state 70

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   29           | PO expression . PF
   38 conditions: expression . comparison expression

    PLUS       shift, and go to state 73
    MINUS      shift, and go to state 74
    MULT       shift, and go to state 75
    DIV        shift, and go to state 76
    EGAL       shift, and go to state 77
    INF        shift, and go to state 78
    SUP        shift, and go to state 79
    SUPEG      shift, and go to state 80
    INFEG      shift, and go to state 81
    EGALITE    shift, and go to state 82
    DIFFERENT  shift, and go to state 83
    PF         shift, and go to state 98

    comparison  go to state 84


state 71

   39 conditions: conditions . OR conditions
   40           | conditions . AND conditions
   41           | PO conditions . PF

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    PF   shift, and go to state 99


state 72

   30 expression: IDF CO . expression CF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 100


state 73

   25 expression: expression PLUS . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 101


state 74

   26 expression: expression MINUS . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 102


state 75

   27 expression: expression MULT . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 103


state 76

   28 expression: expression DIV . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 104


state 77

   45 comparison: EGAL .

    $default  reduce using rule 45 (comparison)


state 78

   44 comparison: INF .

    $default  reduce using rule 44 (comparison)


state 79

   43 comparison: SUP .

    $default  reduce using rule 43 (comparison)


state 80

   46 comparison: SUPEG .

    $default  reduce using rule 46 (comparison)


state 81

   47 comparison: INFEG .

    $default  reduce using rule 47 (comparison)


state 82

   48 comparison: EGALITE .

    $default  reduce using rule 48 (comparison)


state 83

   49 comparison: DIFFERENT .

    $default  reduce using rule 49 (comparison)


state 84

   38 conditions: expression comparison . expression

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 105


state 85

   40 conditions: conditions AND . conditions

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 57
    conditions  go to state 106


state 86

   39 conditions: conditions OR . conditions

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 57
    conditions  go to state 107


state 87

   31 condition: IF PO conditions PF . THEN AO instructions AF ELSE AO instructions AF
   32          | IF PO conditions PF . THEN AO instructions AF

    THEN  shift, and go to state 108


state 88

   33 boucle: DO AO instructions AF . WHILE PO conditions PF PVG

    WHILE  shift, and go to state 109


state 89

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   34 boucle: FOR IDF FROM expression . TO expression STEP expression AO instructions AF

    TO     shift, and go to state 110
    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76


state 90

   35 lecture: INPUT PO IDF PF . PVG

    PVG  shift, and go to state 111


state 91

   36 ecriture: OUTPUT PO STRING COMMA . IDF PF PVG

    IDF  shift, and go to state 112


state 92

   37 ecriture: OUTPUT PO STRING PF . PVG

    PVG  shift, and go to state 113


state 93

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   29           | PO expression . PF

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76
    PF     shift, and go to state 98


state 94

   21 affectation: IDF AFF expression PVG .

    $default  reduce using rule 21 (affectation)


state 95

   22 affectation: IDF CO expression CF . AFF expression PVG

    AFF  shift, and go to state 114


state 96

    5 declaration: LET var_list DP CO type PVG INTEGER . CF PVG

    CF  shift, and go to state 115


state 97

    6 declaration: DEFINE CONST IDF DP type EGAL value . PVG

    PVG  shift, and go to state 116


state 98

   29 expression: PO expression PF .

    $default  reduce using rule 29 (expression)


state 99

   41 conditions: PO conditions PF .

    $default  reduce using rule 41 (conditions)


state 100

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   30           | IDF CO expression . CF

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76
    CF     shift, and go to state 117


state 101

   25 expression: expression . PLUS expression
   25           | expression PLUS expression .
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression

    MULT  shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 25 (expression)


state 102

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   26           | expression MINUS expression .
   27           | expression . MULT expression
   28           | expression . DIV expression

    MULT  shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 26 (expression)


state 103

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   27           | expression MULT expression .
   28           | expression . DIV expression

    $default  reduce using rule 27 (expression)


state 104

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   28           | expression DIV expression .

    $default  reduce using rule 28 (expression)


state 105

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   38 conditions: expression comparison expression .

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76

    $default  reduce using rule 38 (conditions)


state 106

   39 conditions: conditions . OR conditions
   40           | conditions . AND conditions
   40           | conditions AND conditions .

    $default  reduce using rule 40 (conditions)


state 107

   39 conditions: conditions . OR conditions
   39           | conditions OR conditions .
   40           | conditions . AND conditions

    AND  shift, and go to state 85

    $default  reduce using rule 39 (conditions)


state 108

   31 condition: IF PO conditions PF THEN . AO instructions AF ELSE AO instructions AF
   32          | IF PO conditions PF THEN . AO instructions AF

    AO  shift, and go to state 118


state 109

   33 boucle: DO AO instructions AF WHILE . PO conditions PF PVG

    PO  shift, and go to state 119


state 110

   34 boucle: FOR IDF FROM expression TO . expression STEP expression AO instructions AF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 120


state 111

   35 lecture: INPUT PO IDF PF PVG .

    $default  reduce using rule 35 (lecture)


state 112

   36 ecriture: OUTPUT PO STRING COMMA IDF . PF PVG

    PF  shift, and go to state 121


state 113

   37 ecriture: OUTPUT PO STRING PF PVG .

    $default  reduce using rule 37 (ecriture)


state 114

   22 affectation: IDF CO expression CF AFF . expression PVG

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 122


state 115

    5 declaration: LET var_list DP CO type PVG INTEGER CF . PVG

    PVG  shift, and go to state 123


state 116

    6 declaration: DEFINE CONST IDF DP type EGAL value PVG .

    $default  reduce using rule 6 (declaration)


state 117

   30 expression: IDF CO expression CF .

    $default  reduce using rule 30 (expression)


state 118

   31 condition: IF PO conditions PF THEN AO . instructions AF ELSE AO instructions AF
   32          | IF PO conditions PF THEN AO . instructions AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 124
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 119

   33 boucle: DO AO instructions AF WHILE PO . conditions PF PVG

    NOT       shift, and go to state 50
    PO        shift, and go to state 51
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 57
    conditions  go to state 125


state 120

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   34 boucle: FOR IDF FROM expression TO expression . STEP expression AO instructions AF

    STEP   shift, and go to state 126
    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76


state 121

   36 ecriture: OUTPUT PO STRING COMMA IDF PF . PVG

    PVG  shift, and go to state 127


state 122

   22 affectation: IDF CO expression CF AFF expression . PVG
   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76
    PVG    shift, and go to state 128


state 123

    5 declaration: LET var_list DP CO type PVG INTEGER CF PVG .

    $default  reduce using rule 5 (declaration)


state 124

   15 instructions: instructions . instruction
   31 condition: IF PO conditions PF THEN AO instructions . AF ELSE AO instructions AF
   32          | IF PO conditions PF THEN AO instructions . AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 129
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 125

   33 boucle: DO AO instructions AF WHILE PO conditions . PF PVG
   39 conditions: conditions . OR conditions
   40           | conditions . AND conditions

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    PF   shift, and go to state 130


state 126

   34 boucle: FOR IDF FROM expression TO expression STEP . expression AO instructions AF

    PO        shift, and go to state 63
    INTEGER   shift, and go to state 52
    FLOATING  shift, and go to state 53
    STRING    shift, and go to state 54
    IDF       shift, and go to state 55

    value       go to state 56
    expression  go to state 131


state 127

   36 ecriture: OUTPUT PO STRING COMMA IDF PF PVG .

    $default  reduce using rule 36 (ecriture)


state 128

   22 affectation: IDF CO expression CF AFF expression PVG .

    $default  reduce using rule 22 (affectation)


state 129

   31 condition: IF PO conditions PF THEN AO instructions AF . ELSE AO instructions AF
   32          | IF PO conditions PF THEN AO instructions AF .

    ELSE  shift, and go to state 132

    $default  reduce using rule 32 (condition)


state 130

   33 boucle: DO AO instructions AF WHILE PO conditions PF . PVG

    PVG  shift, and go to state 133


state 131

   25 expression: expression . PLUS expression
   26           | expression . MINUS expression
   27           | expression . MULT expression
   28           | expression . DIV expression
   34 boucle: FOR IDF FROM expression TO expression STEP expression . AO instructions AF

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    MULT   shift, and go to state 75
    DIV    shift, and go to state 76
    AO     shift, and go to state 134


state 132

   31 condition: IF PO conditions PF THEN AO instructions AF ELSE . AO instructions AF

    AO  shift, and go to state 135


state 133

   33 boucle: DO AO instructions AF WHILE PO conditions PF PVG .

    $default  reduce using rule 33 (boucle)


state 134

   34 boucle: FOR IDF FROM expression TO expression STEP expression AO . instructions AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 136
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 135

   31 condition: IF PO conditions PF THEN AO instructions AF ELSE AO . instructions AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    IDF     shift, and go to state 24

    instructions  go to state 137
    instruction   go to state 26
    affectation   go to state 27
    condition     go to state 28
    boucle        go to state 29
    lecture       go to state 30
    ecriture      go to state 31


state 136

   15 instructions: instructions . instruction
   34 boucle: FOR IDF FROM expression TO expression STEP expression AO instructions . AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 138
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 137

   15 instructions: instructions . instruction
   31 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions . AF

    IF      shift, and go to state 19
    DO      shift, and go to state 20
    FOR     shift, and go to state 21
    INPUT   shift, and go to state 22
    OUTPUT  shift, and go to state 23
    AF      shift, and go to state 139
    IDF     shift, and go to state 24

    instruction  go to state 46
    affectation  go to state 27
    condition    go to state 28
    boucle       go to state 29
    lecture      go to state 30
    ecriture     go to state 31


state 138

   34 boucle: FOR IDF FROM expression TO expression STEP expression AO instructions AF .

    $default  reduce using rule 34 (boucle)


state 139

   31 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions AF .

    $default  reduce using rule 31 (condition)
