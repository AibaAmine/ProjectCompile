Grammar

    0 $accept: programme $end

    1 programme: program_header VAR declarations BEGINPG instructions ENDPG PVG

    2 program_header: MAINPRGM PROGNAME PVG

    3 declarations: declaration
    4             | declarations declaration

    5 declaration: LET var_list DP type PVG
    6            | LET var_list DP CO type PVG INTEGER CF PVG
    7            | DEFINE CONST IDF DP type EGAL value PVG

    8 var_list: IDF
    9         | var_list COMMA IDF

   10 type: INT
   11     | FLOAT

   12 value: INTEGER
   13      | FLOATING
   14      | STRING

   15 instructions: instruction
   16             | instructions instruction

   17 instruction: affectation
   18            | condition
   19            | boucle
   20            | lecture
   21            | ecriture

   22 affectation: IDF AFF expression PVG
   23            | IDF CO expression CF AFF expression PVG

   24 expression: value
   25           | IDF
   26           | expression PLUS expression
   27           | expression MINUS expression
   28           | expression MULT expression
   29           | expression DIV expression
   30           | PO expression PF
   31           | IDF CO expression CF

   32 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions AF
   33          | IF PO conditions PF THEN AO instructions AF

   34 boucle: DO AO instructions AF WHILE PO conditions PF PVG
   35       | FOR IDF FROM expression TO expression STEP expression AO instructions AF

   36 lecture: INPUT PO IDF PF PVG

   37 ecriture: OUTPUT PO STRING COMMA IDF PF PVG
   38         | OUTPUT PO STRING PF PVG

   39 conditions: expression comparison expression
   40           | conditions OR conditions
   41           | conditions AND conditions
   42           | PO conditions PF
   43           | NOT conditions

   44 comparison: SUP
   45           | INF
   46           | EGAL
   47           | SUPEG
   48           | INFEG
   49           | EGALITE
   50           | DIFFERENT


Terminals, with rules where they appear

$end (0) 0
error (256)
MAINPRGM (258) 2
VAR (259) 1
BEGINPG (260) 1
ENDPG (261) 1
LET (262) 5 6
DEFINE (263) 7
CONST (264) 7
INT (265) 10
FLOAT (266) 11
IF (267) 32 33
THEN (268) 32 33
ELSE (269) 32
DO (270) 34
WHILE (271) 34
FOR (272) 35
FROM (273) 35
TO (274) 35
STEP (275) 35
INPUT (276) 36
OUTPUT (277) 37 38
PLUS (278) 26
MINUS (279) 27
MULT (280) 28
DIV (281) 29
AFF (282) 22 23
EGAL (283) 7 46
INF (284) 45
SUP (285) 44
SUPEG (286) 47
INFEG (287) 48
EGALITE (288) 49
DIFFERENT (289) 50
AND (290) 41
OR (291) 40
NOT (292) 43
PVG (293) 1 2 5 6 7 22 23 34 36 37 38
DP (294) 5 6 7
COMMA (295) 9 37
PO (296) 30 32 33 34 36 37 38 42
PF (297) 30 32 33 34 36 37 38 42
AO (298) 32 33 34 35
AF (299) 32 33 34 35
CO (300) 6 23 31
CF (301) 6 23 31
INTEGER (302) 6 12
FLOATING (303) 13
STRING (304) 14 37 38
IDF (305) 7 8 9 22 23 25 31 35 36 37
PROGNAME (306) 2


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
programme (53)
    on left: 1, on right: 0
program_header (54)
    on left: 2, on right: 1
declarations (55)
    on left: 3 4, on right: 1 4
declaration (56)
    on left: 5 6 7, on right: 3 4
var_list (57)
    on left: 8 9, on right: 5 6 9
type (58)
    on left: 10 11, on right: 5 6 7
value (59)
    on left: 12 13 14, on right: 7 24
instructions (60)
    on left: 15 16, on right: 1 16 32 33 34 35
instruction (61)
    on left: 17 18 19 20 21, on right: 15 16
affectation (62)
    on left: 22 23, on right: 17
expression (63)
    on left: 24 25 26 27 28 29 30 31, on right: 22 23 26 27 28 29 30
    31 35 39
condition (64)
    on left: 32 33, on right: 18
boucle (65)
    on left: 34 35, on right: 19
lecture (66)
    on left: 36, on right: 20
ecriture (67)
    on left: 37 38, on right: 21
conditions (68)
    on left: 39 40 41 42 43, on right: 32 33 34 40 41 42 43
comparison (69)
    on left: 44 45 46 47 48 49 50, on right: 39


state 0

    0 $accept: . programme $end

    MAINPRGM  shift, and go to state 1

    programme       go to state 2
    program_header  go to state 3


state 1

    2 program_header: MAINPRGM . PROGNAME PVG

    PROGNAME  shift, and go to state 4


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 5


state 3

    1 programme: program_header . VAR declarations BEGINPG instructions ENDPG PVG

    VAR  shift, and go to state 6


state 4

    2 program_header: MAINPRGM PROGNAME . PVG

    PVG  shift, and go to state 7


state 5

    0 $accept: programme $end .

    $default  accept


state 6

    1 programme: program_header VAR . declarations BEGINPG instructions ENDPG PVG

    LET     shift, and go to state 8
    DEFINE  shift, and go to state 9

    declarations  go to state 10
    declaration   go to state 11


state 7

    2 program_header: MAINPRGM PROGNAME PVG .

    $default  reduce using rule 2 (program_header)


state 8

    5 declaration: LET . var_list DP type PVG
    6            | LET . var_list DP CO type PVG INTEGER CF PVG

    IDF  shift, and go to state 12

    var_list  go to state 13


state 9

    7 declaration: DEFINE . CONST IDF DP type EGAL value PVG

    CONST  shift, and go to state 14


state 10

    1 programme: program_header VAR declarations . BEGINPG instructions ENDPG PVG
    4 declarations: declarations . declaration

    BEGINPG  shift, and go to state 15
    LET      shift, and go to state 8
    DEFINE   shift, and go to state 9

    declaration  go to state 16


state 11

    3 declarations: declaration .

    $default  reduce using rule 3 (declarations)


state 12

    8 var_list: IDF .

    $default  reduce using rule 8 (var_list)


state 13

    5 declaration: LET var_list . DP type PVG
    6            | LET var_list . DP CO type PVG INTEGER CF PVG
    9 var_list: var_list . COMMA IDF

    DP     shift, and go to state 17
    COMMA  shift, and go to state 18


state 14

    7 declaration: DEFINE CONST . IDF DP type EGAL value PVG

    IDF  shift, and go to state 19


state 15

    1 programme: program_header VAR declarations BEGINPG . instructions ENDPG PVG

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    IDF     shift, and go to state 25

    instructions  go to state 26
    instruction   go to state 27
    affectation   go to state 28
    condition     go to state 29
    boucle        go to state 30
    lecture       go to state 31
    ecriture      go to state 32


state 16

    4 declarations: declarations declaration .

    $default  reduce using rule 4 (declarations)


state 17

    5 declaration: LET var_list DP . type PVG
    6            | LET var_list DP . CO type PVG INTEGER CF PVG

    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34
    CO     shift, and go to state 35

    type  go to state 36


state 18

    9 var_list: var_list COMMA . IDF

    IDF  shift, and go to state 37


state 19

    7 declaration: DEFINE CONST IDF . DP type EGAL value PVG

    DP  shift, and go to state 38


state 20

   32 condition: IF . PO conditions PF THEN AO instructions AF ELSE AO instructions AF
   33          | IF . PO conditions PF THEN AO instructions AF

    PO  shift, and go to state 39


state 21

   34 boucle: DO . AO instructions AF WHILE PO conditions PF PVG

    AO  shift, and go to state 40


state 22

   35 boucle: FOR . IDF FROM expression TO expression STEP expression AO instructions AF

    IDF  shift, and go to state 41


state 23

   36 lecture: INPUT . PO IDF PF PVG

    PO  shift, and go to state 42


state 24

   37 ecriture: OUTPUT . PO STRING COMMA IDF PF PVG
   38         | OUTPUT . PO STRING PF PVG

    PO  shift, and go to state 43


state 25

   22 affectation: IDF . AFF expression PVG
   23            | IDF . CO expression CF AFF expression PVG

    AFF  shift, and go to state 44
    CO   shift, and go to state 45


state 26

    1 programme: program_header VAR declarations BEGINPG instructions . ENDPG PVG
   16 instructions: instructions . instruction

    ENDPG   shift, and go to state 46
    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    IDF     shift, and go to state 25

    instruction  go to state 47
    affectation  go to state 28
    condition    go to state 29
    boucle       go to state 30
    lecture      go to state 31
    ecriture     go to state 32


state 27

   15 instructions: instruction .

    $default  reduce using rule 15 (instructions)


state 28

   17 instruction: affectation .

    $default  reduce using rule 17 (instruction)


state 29

   18 instruction: condition .

    $default  reduce using rule 18 (instruction)


state 30

   19 instruction: boucle .

    $default  reduce using rule 19 (instruction)


state 31

   20 instruction: lecture .

    $default  reduce using rule 20 (instruction)


state 32

   21 instruction: ecriture .

    $default  reduce using rule 21 (instruction)


state 33

   10 type: INT .

    $default  reduce using rule 10 (type)


state 34

   11 type: FLOAT .

    $default  reduce using rule 11 (type)


state 35

    6 declaration: LET var_list DP CO . type PVG INTEGER CF PVG

    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34

    type  go to state 48


state 36

    5 declaration: LET var_list DP type . PVG

    PVG  shift, and go to state 49


state 37

    9 var_list: var_list COMMA IDF .

    $default  reduce using rule 9 (var_list)


state 38

    7 declaration: DEFINE CONST IDF DP . type EGAL value PVG

    INT    shift, and go to state 33
    FLOAT  shift, and go to state 34

    type  go to state 50


state 39

   32 condition: IF PO . conditions PF THEN AO instructions AF ELSE AO instructions AF
   33          | IF PO . conditions PF THEN AO instructions AF

    NOT       shift, and go to state 51
    PO        shift, and go to state 52
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 58
    conditions  go to state 59


state 40

   34 boucle: DO AO . instructions AF WHILE PO conditions PF PVG

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    IDF     shift, and go to state 25

    instructions  go to state 60
    instruction   go to state 27
    affectation   go to state 28
    condition     go to state 29
    boucle        go to state 30
    lecture       go to state 31
    ecriture      go to state 32


state 41

   35 boucle: FOR IDF . FROM expression TO expression STEP expression AO instructions AF

    FROM  shift, and go to state 61


state 42

   36 lecture: INPUT PO . IDF PF PVG

    IDF  shift, and go to state 62


state 43

   37 ecriture: OUTPUT PO . STRING COMMA IDF PF PVG
   38         | OUTPUT PO . STRING PF PVG

    STRING  shift, and go to state 63


state 44

   22 affectation: IDF AFF . expression PVG

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 65


state 45

   23 affectation: IDF CO . expression CF AFF expression PVG

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 66


state 46

    1 programme: program_header VAR declarations BEGINPG instructions ENDPG . PVG

    PVG  shift, and go to state 67


state 47

   16 instructions: instructions instruction .

    $default  reduce using rule 16 (instructions)


state 48

    6 declaration: LET var_list DP CO type . PVG INTEGER CF PVG

    PVG  shift, and go to state 68


state 49

    5 declaration: LET var_list DP type PVG .

    $default  reduce using rule 5 (declaration)


state 50

    7 declaration: DEFINE CONST IDF DP type . EGAL value PVG

    EGAL  shift, and go to state 69


state 51

   43 conditions: NOT . conditions

    NOT       shift, and go to state 51
    PO        shift, and go to state 52
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 58
    conditions  go to state 70


state 52

   30 expression: PO . expression PF
   42 conditions: PO . conditions PF

    NOT       shift, and go to state 51
    PO        shift, and go to state 52
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 71
    conditions  go to state 72


state 53

   12 value: INTEGER .

    $default  reduce using rule 12 (value)


state 54

   13 value: FLOATING .

    $default  reduce using rule 13 (value)


state 55

   14 value: STRING .

    $default  reduce using rule 14 (value)


state 56

   25 expression: IDF .
   31           | IDF . CO expression CF

    CO  shift, and go to state 73

    $default  reduce using rule 25 (expression)


state 57

   24 expression: value .

    $default  reduce using rule 24 (expression)


state 58

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   39 conditions: expression . comparison expression

    PLUS       shift, and go to state 74
    MINUS      shift, and go to state 75
    MULT       shift, and go to state 76
    DIV        shift, and go to state 77
    EGAL       shift, and go to state 78
    INF        shift, and go to state 79
    SUP        shift, and go to state 80
    SUPEG      shift, and go to state 81
    INFEG      shift, and go to state 82
    EGALITE    shift, and go to state 83
    DIFFERENT  shift, and go to state 84

    comparison  go to state 85


state 59

   32 condition: IF PO conditions . PF THEN AO instructions AF ELSE AO instructions AF
   33          | IF PO conditions . PF THEN AO instructions AF
   40 conditions: conditions . OR conditions
   41           | conditions . AND conditions

    AND  shift, and go to state 86
    OR   shift, and go to state 87
    PF   shift, and go to state 88


state 60

   16 instructions: instructions . instruction
   34 boucle: DO AO instructions . AF WHILE PO conditions PF PVG

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    AF      shift, and go to state 89
    IDF     shift, and go to state 25

    instruction  go to state 47
    affectation  go to state 28
    condition    go to state 29
    boucle       go to state 30
    lecture      go to state 31
    ecriture     go to state 32


state 61

   35 boucle: FOR IDF FROM . expression TO expression STEP expression AO instructions AF

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 90


state 62

   36 lecture: INPUT PO IDF . PF PVG

    PF  shift, and go to state 91


state 63

   37 ecriture: OUTPUT PO STRING . COMMA IDF PF PVG
   38         | OUTPUT PO STRING . PF PVG

    COMMA  shift, and go to state 92
    PF     shift, and go to state 93


state 64

   30 expression: PO . expression PF

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 94


state 65

   22 affectation: IDF AFF expression . PVG
   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77
    PVG    shift, and go to state 95


state 66

   23 affectation: IDF CO expression . CF AFF expression PVG
   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77
    CF     shift, and go to state 96


state 67

    1 programme: program_header VAR declarations BEGINPG instructions ENDPG PVG .

    $default  reduce using rule 1 (programme)


state 68

    6 declaration: LET var_list DP CO type PVG . INTEGER CF PVG

    INTEGER  shift, and go to state 97


state 69

    7 declaration: DEFINE CONST IDF DP type EGAL . value PVG

    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55

    value  go to state 98


state 70

   40 conditions: conditions . OR conditions
   41           | conditions . AND conditions
   43           | NOT conditions .

    $default  reduce using rule 43 (conditions)


state 71

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   30           | PO expression . PF
   39 conditions: expression . comparison expression

    PLUS       shift, and go to state 74
    MINUS      shift, and go to state 75
    MULT       shift, and go to state 76
    DIV        shift, and go to state 77
    EGAL       shift, and go to state 78
    INF        shift, and go to state 79
    SUP        shift, and go to state 80
    SUPEG      shift, and go to state 81
    INFEG      shift, and go to state 82
    EGALITE    shift, and go to state 83
    DIFFERENT  shift, and go to state 84
    PF         shift, and go to state 99

    comparison  go to state 85


state 72

   40 conditions: conditions . OR conditions
   41           | conditions . AND conditions
   42           | PO conditions . PF

    AND  shift, and go to state 86
    OR   shift, and go to state 87
    PF   shift, and go to state 100


state 73

   31 expression: IDF CO . expression CF

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 101


state 74

   26 expression: expression PLUS . expression

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 102


state 75

   27 expression: expression MINUS . expression

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 103


state 76

   28 expression: expression MULT . expression

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 104


state 77

   29 expression: expression DIV . expression

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 105


state 78

   46 comparison: EGAL .

    $default  reduce using rule 46 (comparison)


state 79

   45 comparison: INF .

    $default  reduce using rule 45 (comparison)


state 80

   44 comparison: SUP .

    $default  reduce using rule 44 (comparison)


state 81

   47 comparison: SUPEG .

    $default  reduce using rule 47 (comparison)


state 82

   48 comparison: INFEG .

    $default  reduce using rule 48 (comparison)


state 83

   49 comparison: EGALITE .

    $default  reduce using rule 49 (comparison)


state 84

   50 comparison: DIFFERENT .

    $default  reduce using rule 50 (comparison)


state 85

   39 conditions: expression comparison . expression

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 106


state 86

   41 conditions: conditions AND . conditions

    NOT       shift, and go to state 51
    PO        shift, and go to state 52
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 58
    conditions  go to state 107


state 87

   40 conditions: conditions OR . conditions

    NOT       shift, and go to state 51
    PO        shift, and go to state 52
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 58
    conditions  go to state 108


state 88

   32 condition: IF PO conditions PF . THEN AO instructions AF ELSE AO instructions AF
   33          | IF PO conditions PF . THEN AO instructions AF

    THEN  shift, and go to state 109


state 89

   34 boucle: DO AO instructions AF . WHILE PO conditions PF PVG

    WHILE  shift, and go to state 110


state 90

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   35 boucle: FOR IDF FROM expression . TO expression STEP expression AO instructions AF

    TO     shift, and go to state 111
    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77


state 91

   36 lecture: INPUT PO IDF PF . PVG

    PVG  shift, and go to state 112


state 92

   37 ecriture: OUTPUT PO STRING COMMA . IDF PF PVG

    IDF  shift, and go to state 113


state 93

   38 ecriture: OUTPUT PO STRING PF . PVG

    PVG  shift, and go to state 114


state 94

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   30           | PO expression . PF

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77
    PF     shift, and go to state 99


state 95

   22 affectation: IDF AFF expression PVG .

    $default  reduce using rule 22 (affectation)


state 96

   23 affectation: IDF CO expression CF . AFF expression PVG

    AFF  shift, and go to state 115


state 97

    6 declaration: LET var_list DP CO type PVG INTEGER . CF PVG

    CF  shift, and go to state 116


state 98

    7 declaration: DEFINE CONST IDF DP type EGAL value . PVG

    PVG  shift, and go to state 117


state 99

   30 expression: PO expression PF .

    $default  reduce using rule 30 (expression)


state 100

   42 conditions: PO conditions PF .

    $default  reduce using rule 42 (conditions)


state 101

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   31           | IDF CO expression . CF

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77
    CF     shift, and go to state 118


state 102

   26 expression: expression . PLUS expression
   26           | expression PLUS expression .
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression

    MULT  shift, and go to state 76
    DIV   shift, and go to state 77

    $default  reduce using rule 26 (expression)


state 103

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   27           | expression MINUS expression .
   28           | expression . MULT expression
   29           | expression . DIV expression

    MULT  shift, and go to state 76
    DIV   shift, and go to state 77

    $default  reduce using rule 27 (expression)


state 104

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   28           | expression MULT expression .
   29           | expression . DIV expression

    $default  reduce using rule 28 (expression)


state 105

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   29           | expression DIV expression .

    $default  reduce using rule 29 (expression)


state 106

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   39 conditions: expression comparison expression .

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77

    $default  reduce using rule 39 (conditions)


state 107

   40 conditions: conditions . OR conditions
   41           | conditions . AND conditions
   41           | conditions AND conditions .

    $default  reduce using rule 41 (conditions)


state 108

   40 conditions: conditions . OR conditions
   40           | conditions OR conditions .
   41           | conditions . AND conditions

    AND  shift, and go to state 86

    $default  reduce using rule 40 (conditions)


state 109

   32 condition: IF PO conditions PF THEN . AO instructions AF ELSE AO instructions AF
   33          | IF PO conditions PF THEN . AO instructions AF

    AO  shift, and go to state 119


state 110

   34 boucle: DO AO instructions AF WHILE . PO conditions PF PVG

    PO  shift, and go to state 120


state 111

   35 boucle: FOR IDF FROM expression TO . expression STEP expression AO instructions AF

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 121


state 112

   36 lecture: INPUT PO IDF PF PVG .

    $default  reduce using rule 36 (lecture)


state 113

   37 ecriture: OUTPUT PO STRING COMMA IDF . PF PVG

    PF  shift, and go to state 122


state 114

   38 ecriture: OUTPUT PO STRING PF PVG .

    $default  reduce using rule 38 (ecriture)


state 115

   23 affectation: IDF CO expression CF AFF . expression PVG

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 123


state 116

    6 declaration: LET var_list DP CO type PVG INTEGER CF . PVG

    PVG  shift, and go to state 124


state 117

    7 declaration: DEFINE CONST IDF DP type EGAL value PVG .

    $default  reduce using rule 7 (declaration)


state 118

   31 expression: IDF CO expression CF .

    $default  reduce using rule 31 (expression)


state 119

   32 condition: IF PO conditions PF THEN AO . instructions AF ELSE AO instructions AF
   33          | IF PO conditions PF THEN AO . instructions AF

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    IDF     shift, and go to state 25

    instructions  go to state 125
    instruction   go to state 27
    affectation   go to state 28
    condition     go to state 29
    boucle        go to state 30
    lecture       go to state 31
    ecriture      go to state 32


state 120

   34 boucle: DO AO instructions AF WHILE PO . conditions PF PVG

    NOT       shift, and go to state 51
    PO        shift, and go to state 52
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 58
    conditions  go to state 126


state 121

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   35 boucle: FOR IDF FROM expression TO expression . STEP expression AO instructions AF

    STEP   shift, and go to state 127
    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77


state 122

   37 ecriture: OUTPUT PO STRING COMMA IDF PF . PVG

    PVG  shift, and go to state 128


state 123

   23 affectation: IDF CO expression CF AFF expression . PVG
   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77
    PVG    shift, and go to state 129


state 124

    6 declaration: LET var_list DP CO type PVG INTEGER CF PVG .

    $default  reduce using rule 6 (declaration)


state 125

   16 instructions: instructions . instruction
   32 condition: IF PO conditions PF THEN AO instructions . AF ELSE AO instructions AF
   33          | IF PO conditions PF THEN AO instructions . AF

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    AF      shift, and go to state 130
    IDF     shift, and go to state 25

    instruction  go to state 47
    affectation  go to state 28
    condition    go to state 29
    boucle       go to state 30
    lecture      go to state 31
    ecriture     go to state 32


state 126

   34 boucle: DO AO instructions AF WHILE PO conditions . PF PVG
   40 conditions: conditions . OR conditions
   41           | conditions . AND conditions

    AND  shift, and go to state 86
    OR   shift, and go to state 87
    PF   shift, and go to state 131


state 127

   35 boucle: FOR IDF FROM expression TO expression STEP . expression AO instructions AF

    PO        shift, and go to state 64
    INTEGER   shift, and go to state 53
    FLOATING  shift, and go to state 54
    STRING    shift, and go to state 55
    IDF       shift, and go to state 56

    value       go to state 57
    expression  go to state 132


state 128

   37 ecriture: OUTPUT PO STRING COMMA IDF PF PVG .

    $default  reduce using rule 37 (ecriture)


state 129

   23 affectation: IDF CO expression CF AFF expression PVG .

    $default  reduce using rule 23 (affectation)


state 130

   32 condition: IF PO conditions PF THEN AO instructions AF . ELSE AO instructions AF
   33          | IF PO conditions PF THEN AO instructions AF .

    ELSE  shift, and go to state 133

    $default  reduce using rule 33 (condition)


state 131

   34 boucle: DO AO instructions AF WHILE PO conditions PF . PVG

    PVG  shift, and go to state 134


state 132

   26 expression: expression . PLUS expression
   27           | expression . MINUS expression
   28           | expression . MULT expression
   29           | expression . DIV expression
   35 boucle: FOR IDF FROM expression TO expression STEP expression . AO instructions AF

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75
    MULT   shift, and go to state 76
    DIV    shift, and go to state 77
    AO     shift, and go to state 135


state 133

   32 condition: IF PO conditions PF THEN AO instructions AF ELSE . AO instructions AF

    AO  shift, and go to state 136


state 134

   34 boucle: DO AO instructions AF WHILE PO conditions PF PVG .

    $default  reduce using rule 34 (boucle)


state 135

   35 boucle: FOR IDF FROM expression TO expression STEP expression AO . instructions AF

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    IDF     shift, and go to state 25

    instructions  go to state 137
    instruction   go to state 27
    affectation   go to state 28
    condition     go to state 29
    boucle        go to state 30
    lecture       go to state 31
    ecriture      go to state 32


state 136

   32 condition: IF PO conditions PF THEN AO instructions AF ELSE AO . instructions AF

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    IDF     shift, and go to state 25

    instructions  go to state 138
    instruction   go to state 27
    affectation   go to state 28
    condition     go to state 29
    boucle        go to state 30
    lecture       go to state 31
    ecriture      go to state 32


state 137

   16 instructions: instructions . instruction
   35 boucle: FOR IDF FROM expression TO expression STEP expression AO instructions . AF

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    AF      shift, and go to state 139
    IDF     shift, and go to state 25

    instruction  go to state 47
    affectation  go to state 28
    condition    go to state 29
    boucle       go to state 30
    lecture      go to state 31
    ecriture     go to state 32


state 138

   16 instructions: instructions . instruction
   32 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions . AF

    IF      shift, and go to state 20
    DO      shift, and go to state 21
    FOR     shift, and go to state 22
    INPUT   shift, and go to state 23
    OUTPUT  shift, and go to state 24
    AF      shift, and go to state 140
    IDF     shift, and go to state 25

    instruction  go to state 47
    affectation  go to state 28
    condition    go to state 29
    boucle       go to state 30
    lecture      go to state 31
    ecriture     go to state 32


state 139

   35 boucle: FOR IDF FROM expression TO expression STEP expression AO instructions AF .

    $default  reduce using rule 35 (boucle)


state 140

   32 condition: IF PO conditions PF THEN AO instructions AF ELSE AO instructions AF .

    $default  reduce using rule 32 (condition)
